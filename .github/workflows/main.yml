name: CI/CD Pipeline

on:
    push:
        branches:
            - main
jobs:
    build:
        name: Build and Push Docker Image
        runs-on: ubuntu-latest

        steps:
        #Step1: Checkout the repository    
        - name: Checkout Code
          uses: actions/checkout@v3 
        
        #Step2: Set up .NET SDK
        - name: Set up .NET
          uses: actions/setup-dotnet@v3
          with:
            dotnet-version: '8.0'

        #Step3: Build and publish the application
        - name: Build and Publish the application
          run: |
            dotnet restore
            dotnet publish -c Release -o ./out

        # Step4: Log in to the Docker Hub
        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}   
            password: ${{ secrets.DOCKER_PASSWORD }}  
        
        # Step5: Build Docker Image
        - name: Build Docker Image
          run: |
            docker push ${{ secrets.DOCKER_USERNAME }}/SampleApp:latest
        

        # Step6: Push Docker Image to Docker Hub
        - name : Push Docker Image
          run: |
            docker push ${{ secrets.DOCKER_USERNAME}}/SampleApp:latest

    deploy:
        name: Deploy to Kubernetes
        needs: build
        runs-on: ubuntu-latest

        steps:
        #Step1: Checkout the repositoty
        - name: Checkout the code
          uses: actions/checkout@v3

        #Step2: Configure AWS Credentials
        - name: Configure AWS Credentials
          uses: aws-actions/comfigure-aws-credentials@v2
          with:
            aws-acees-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
            aws-region: us-east-1

        #Step3: Set up kubectl for EKS
        - name: Set up kubectl
          run: |
           aws eks update-kubeconfig --region us-east-1 --name new-eksCluster

        #Step4: Deploy to Kubernets
        - name: Deploy to EKS
          run: |
            kubectl apply -f k8s-deployment.yaml

    
            
        